name: CI Pipeline with Security Tests and Local Deployment

on:
  workflow_dispatch: # Allows manual triggering via GitHub UI
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  zap-proxy-orchestron:
    runs-on: ubuntu-latest

    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          cd src
          npm install

      - name: Start Application
        run: |
          cd src
          nohup npm start &

      - name: Wait for Application to Start
        run: |
          for i in {1..30}; do
            curl -s http://localhost:3000/ && break || sleep 5
          done

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          target: 'http://localhost:3000'
          cmd_options: '-J report.json -w report.md -r report.html -x report.xml'

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          path: report*

      - name: Call Orchestron API
        run: |
          response=$(
            curl -s -w "%{http_code}" \
              -H "Secret-Key: ${{ secrets.ORCHESTRON_SECRET }}" \
              -H "Access-Key: ${{ secrets.ORCHESTRON_ACCESS }}" \
              -F file=@report.xml \
              "${{ secrets.ORCHESTRON_URL }}" \
          )

          if [ "$response" -ne 200 ]; then
            echo "Error: API call failed with status code $response"
            exit 1
          else
            echo "API call succeeded with status code $response"
          fi
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  dependabot-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Dependabot Updates
        run: |
          gh api --method POST -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/dependabot/updates/package-manifest
  
  dependabot-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Dependabot Updates
        run: |
          gh api --method POST -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/dependabot/updates/package-manifest
  
  dependabot-auto-merge:
    needs: zap-proxy-orchestron
    if: github.actor == 'dependabot[bot]' && success()  # Only run if Dependabot is the author and the build succeeds
    runs-on: ubuntu-latest
    steps:
      - name: Auto merge Dependabot PRs
        uses: pascalgn/automerge-action@v0.14.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}


  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/log8100-tp2:latest .

      # Push the Docker image to DockerHub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/log8100-tp2:latest


  deploy-to-azure:
    name: Deploy to azure
    runs-on: ubuntu-latest
    steps:
      - name: TODO
        run: echo TODO
